server {
    listen 80;
    listen 443 ssl; # managed by Certbot

    ssl_certificate /certs/frontend/fullchain.pem; # managed by Certbot
    ssl_certificate_key /certs/frontend/privkey.pem; # managed by Certbot
    include /certs/frontend/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /certs/frontend/ssl-dhparams.pem; # managed by Certbot

    server_name itconference.kathmandu.gov.np;

    root /usr/share/nginx/html;

    location / {
        try_files $uri /index.html;
    }
}

server {
    listen 80;
    listen 443 ssl; # managed by Certbot

    ssl_certificate /certs/backend/fullchain.pem; # managed by Certbot
    ssl_certificate_key /certs/backend/privkey.pem; # managed by Certbot
    include /certs/backend/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /certs/backend/ssl-dhparams.pem; # managed by Certbot

    server_name itconferenceback.kathmandu.gov.np;

    location / {
        proxy_pass http://it-backend:80; # Use the service name defined in docker-compose.yml
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection keep-alive;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }


    location /assets {
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers'
                'Authorization, Content-Type, Accept, Access-Control-Allow-Origin, Access-Control-Allow-Credentials'
                always;

            return 204;
        }

        auth_request /auth_internal;
        alias /assets;

        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers'
            'Authorization, Content-Type, Accept, Access-Control-Allow-Origin, Access-Control-Allow-Credentials'
            always;
    }

    location /assets/s-photo {
        # Ignore auth for speaker photos.
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers'
                'Authorization, Content-Type, Accept, Access-Control-Allow-Origin, Access-Control-Allow-Credentials'
                always;

            return 204;
        }

        alias /assets/s-photo;

        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers'
            'Authorization, Content-Type, Accept, Access-Control-Allow-Origin, Access-Control-Allow-Credentials'
            always;
    }

    location /auth_internal {
        internal;
        proxy_pass http://it-backend:80/api/Auth/file-verify;
    }
}